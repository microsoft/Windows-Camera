// Copyright (c) Microsoft. All rights reserved.

namespace CameraKsPropertyHelper
{
    //
    // Projection to WinRT of parts of ksmedia.h
    // 
    //

    // refer to KSPROPERTY_VIDCAP_CAMERACONTROL
    enum VidCapCameraControlKind
    {
        KSPROPERTY_CAMERACONTROL_PAN = 0,                  // 0
        KSPROPERTY_CAMERACONTROL_TILT,                     // 1
        KSPROPERTY_CAMERACONTROL_ROLL,                     // 2
        KSPROPERTY_CAMERACONTROL_ZOOM,                     // 3
        KSPROPERTY_CAMERACONTROL_EXPOSURE,                 // 4
        KSPROPERTY_CAMERACONTROL_IRIS,                     // 5
        KSPROPERTY_CAMERACONTROL_FOCUS,                    // 6
        KSPROPERTY_CAMERACONTROL_SCANMODE,                 // 7
        KSPROPERTY_CAMERACONTROL_PRIVACY,                  // 8
        KSPROPERTY_CAMERACONTROL_PANTILT,                  // 9
        KSPROPERTY_CAMERACONTROL_PAN_RELATIVE,             // 10
        KSPROPERTY_CAMERACONTROL_TILT_RELATIVE,            // 11
        KSPROPERTY_CAMERACONTROL_ROLL_RELATIVE,            // 12
        KSPROPERTY_CAMERACONTROL_ZOOM_RELATIVE,            // 13
        KSPROPERTY_CAMERACONTROL_EXPOSURE_RELATIVE,        // 14
        KSPROPERTY_CAMERACONTROL_IRIS_RELATIVE,            // 15
        KSPROPERTY_CAMERACONTROL_FOCUS_RELATIVE,           // 16
        KSPROPERTY_CAMERACONTROL_PANTILT_RELATIVE,         // 17
        KSPROPERTY_CAMERACONTROL_FOCAL_LENGTH,             // 18
        KSPROPERTY_CAMERACONTROL_AUTO_EXPOSURE_PRIORITY    // 19
    };

    // refer to KSPROPERTY_VIDCAP_VIDEOPROCAMP
    enum VidCapVideoProcAmpKind
    {
        KSPROPERTY_VIDEOPROCAMP_BRIGHTNESS = 0,             // 0
        KSPROPERTY_VIDEOPROCAMP_CONTRAST,                   // 1
        KSPROPERTY_VIDEOPROCAMP_HUE,                        // 2
        KSPROPERTY_VIDEOPROCAMP_SATURATION,                 // 3
        KSPROPERTY_VIDEOPROCAMP_SHARPNESS,                  // 4
        KSPROPERTY_VIDEOPROCAMP_GAMMA,                      // 5
        KSPROPERTY_VIDEOPROCAMP_COLORENABLE,                // 6
        KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE,               // 7
        KSPROPERTY_VIDEOPROCAMP_BACKLIGHT_COMPENSATION,     // 8
        KSPROPERTY_VIDEOPROCAMP_GAIN,                       // 9
        KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER,         // 10
        KSPROPERTY_VIDEOPROCAMP_DIGITAL_MULTIPLIER_LIMIT,   // 11
        KSPROPERTY_VIDEOPROCAMP_WHITEBALANCE_COMPONENT,     // 12
        KSPROPERTY_VIDEOPROCAMP_POWERLINE_FREQUENCY,        // 13
    };

    // refer to KSPROPERTY_CAMERACONTROL_EXTENDED_PROPERTY
    enum ExtendedControlKind
    {
        KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMODE = 0,                        // 0
        KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOFRAMERATE,                       // 1
        KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOMAXFRAMERATE,                    // 2
        KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTRIGGERTIME,                     // 3
        KSPROPERTY_CAMERACONTROL_EXTENDED_WARMSTART,                            // 4
        KSPROPERTY_CAMERACONTROL_EXTENDED_MAXVIDFPS_PHOTORES,                   // 5
        KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOTHUMBNAIL,                       // 6
        KSPROPERTY_CAMERACONTROL_EXTENDED_SCENEMODE,                            // 7
        KSPROPERTY_CAMERACONTROL_EXTENDED_TORCHMODE,                            // 8
        KSPROPERTY_CAMERACONTROL_EXTENDED_FLASHMODE,                            // 9
        KSPROPERTY_CAMERACONTROL_EXTENDED_OPTIMIZATIONHINT,                     // 10
        KSPROPERTY_CAMERACONTROL_EXTENDED_WHITEBALANCEMODE,                     // 11
        KSPROPERTY_CAMERACONTROL_EXTENDED_EXPOSUREMODE,                         // 12
        KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSMODE,                            // 13
        KSPROPERTY_CAMERACONTROL_EXTENDED_ISO,                                  // 14
        KSPROPERTY_CAMERACONTROL_EXTENDED_FIELDOFVIEW,                          // 15
        KSPROPERTY_CAMERACONTROL_EXTENDED_EVCOMPENSATION,                       // 16
        KSPROPERTY_CAMERACONTROL_EXTENDED_CAMERAANGLEOFFSET,                    // 17
        KSPROPERTY_CAMERACONTROL_EXTENDED_METADATA,                             // 18
        KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSPRIORITY,                        // 19
        KSPROPERTY_CAMERACONTROL_EXTENDED_FOCUSSTATE,                           // 20
        KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_CONFIGCAPS,                       // 21
        KSPROPERTY_CAMERACONTROL_EXTENDED_ROI_ISPCONTROL,                       // 22
        KSPROPERTY_CAMERACONTROL_EXTENDED_PHOTOCONFIRMATION,                    // 23
        KSPROPERTY_CAMERACONTROL_EXTENDED_ZOOM,                                 // 24
        KSPROPERTY_CAMERACONTROL_EXTENDED_MCC,                                  // 25
        KSPROPERTY_CAMERACONTROL_EXTENDED_ISO_ADVANCED,                         // 26
        KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOSTABILIZATION,                   // 27
        KSPROPERTY_CAMERACONTROL_EXTENDED_VFR,                                  // 28
        KSPROPERTY_CAMERACONTROL_EXTENDED_FACEDETECTION,                        // 29
        KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOHDR,                             // 30
        KSPROPERTY_CAMERACONTROL_EXTENDED_HISTOGRAM,                            // 31
        KSPROPERTY_CAMERACONTROL_EXTENDED_OIS,                                  // 32
        KSPROPERTY_CAMERACONTROL_EXTENDED_ADVANCEDPHOTO,                        // 33
        KSPROPERTY_CAMERACONTROL_EXTENDED_PROFILE,                              // 34
        KSPROPERTY_CAMERACONTROL_EXTENDED_FACEAUTH_MODE,                        // 35
        KSPROPERTY_CAMERACONTROL_EXTENDED_SECURE_MODE,                          // 36
        KSPROPERTY_CAMERACONTROL_EXTENDED_VIDEOTEMPORALDENOISING,               // 37
        KSPROPERTY_CAMERACONTROL_EXTENDED_IRTORCHMODE,                          // 38
        KSPROPERTY_CAMERACONTROL_EXTENDED_RELATIVEPANELOPTIMIZATION,            // 39
        KSPROPERTY_CAMERACONTROL_EXTENDED_EYEGAZECORRECTION,                    // 40
        KSPROPERTY_CAMERACONTROL_EXTENDED_BACKGROUNDSEGMENTATION,               // 41
        KSPROPERTY_CAMERACONTROL_EXTENDED_DIGITALWINDOW_CONFIGCAPS,             // 42
        KSPROPERTY_CAMERACONTROL_EXTENDED_DIGITALWINDOW,                        // 43
    };

    // refer to flags and capabilities of KSPROPERTY_CAMERACONTROL_EXTENDED_EYEGAZECORRECTION
    enum EyeGazeCorrectionCapabilityKind
    {
        KSCAMERA_EXTENDEDPROP_EYEGAZECORRECTION_OFF = 0,
        KSCAMERA_EXTENDEDPROP_EYEGAZECORRECTION_ON = 1,
        KSCAMERA_EXTENDEDPROP_EYEGAZECORRECTION_STARE = 2,
    };

    // refer to flags and capabilities of KSPROPERTY_CAMERACONTROL_EXTENDED_BACKGROUNDSEGMENTATION
    enum BackgroundSegmentationCapabilityKind
    {
        KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_OFF = 0x0000000000000000,
        KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_BLUR = 0x0000000000000001,
        KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_MASK = 0x0000000000000002,
        KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_SHALLOWFOCUS = 0x0000000000000004,
    };

    // refer to flags and capabilities of KSPROPERTY_CAMERACONTROL_EXTENDED_DIGITALWINDOW
    enum DigitalWindowCapabilityKind
    {
        KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_MANUAL = 0x0000000000000000,
        KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_AUTOFACEFRAMING = 0x0000000000000001
    };

    interface IVidCapVideoProcAmpPropetyPayload
    {
        VidCapVideoProcAmpKind VidCapVideoProcAmpKind{ get; };
        Double Min{ get; };
        Double Max{ get; };
        Double Step{ get; };
        Int32 Value{ get; };
    }

    // class to encapsulate a KSPROPERTY containing a KSPROPERTY_DESCRIPTION, a KSPROPERTY_MEMBERSHEADER and a KSPROPERTY_STEPPING_LONG
    runtimeclass VidCapVideoProcAmpPropetyPayload : [default] IVidCapVideoProcAmpPropetyPayload
    {
    }

    // Accessors to parts of KSCAMERA_EXTENDEDPROP_HEADER
    interface IExtendedPropertyPayload
    {
        ExtendedControlKind ExtendedControlKind{ get; };
        UInt64 Capability{ get; };
        UInt64 Flags{ get; };
        UInt32 Size{ get; };
    }

    // class to encapsulate a KSPROPERTY containing a KSCAMERA_EXTENDEDPROP_HEADER and a KSCAMERA_EXTENDEDPROP_VALUE
    runtimeclass BasicExtendedPropertyPayload : [default] IExtendedPropertyPayload
    {
    }

    // class to encapsulate and access a KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS
    runtimeclass BackgroundSegmentationConfigCaps
    {
        // Output width and height in pixels
        Windows.Foundation.Size Resolution { get; };

        // The maximum frame rate the driver can accommodate  for achieving 
        // background segmentation for each frame corresponding to Resolution
        Int32 MaxFrameRateNumerator{ get; };
        Int32 MaxFrameRateDenominator{ get; };

        // The width and height of the mask produced when streaming
        // with a MediaType corresponding to Resolution and MaxFrameRate
        Windows.Foundation.Size MaskResolution { get; };

        // Optional subtype for which this configuration capability applies. If left 
        // to zero, all streams conforming the Resolution and MaxFrameRate will support 
        // background segmentation with the specified MaskResolution.
        Guid SubType{ get; };
    }

    // class to encapsulate a KSPROPERTY containing a KSCAMERA_EXTENDEDPROP_HEADER and one or more KSCAMERA_EXTENDEDPROP_BACKGROUNDSEGMENTATION_CONFIGCAPS
    runtimeclass BackgroundSegmentationPropertyPayload : [default] IExtendedPropertyPayload
    {
        Windows.Foundation.Collections.IVectorView<BackgroundSegmentationConfigCaps> ConfigCaps { get; };
    }


    // refer to KSCAMERA_MetadataId
    enum FrameMetadataKind
    {
        MetadataId_DigitalWindow = 8,
        MetadataId_BackgroundSegmentationMask = 9,
        MetadataId_FaceROIs = 1000
    };

    interface IMetadataPayload
    {
        FrameMetadataKind FrameMetadataKind{ get; };
    }

    struct Rectd
    {
        Double left;
        Double top;
        Double right;
        Double bottom;
    };

    // class to encapsulate and access a KSCAMERA_EXTENDEDPROP_DIGITALWINDOW_SETTING
    runtimeclass DigitalWindowMetadata : [default] IMetadataPayload
    {
        Double OriginX { get; };
        Double OriginY { get; };
        Double WindowSize { get; };
    }

    // class to encapsulate and access a KSCAMERA_METADATA_BACKGROUNDSEGMENTATIONMASK
    runtimeclass BackgroundSegmentationMaskMetadata : [default] IMetadataPayload
    {
        Windows.Graphics.Imaging.BitmapBounds MaskCoverageBoundingBox { get; };
        Windows.Foundation.Size MaskResolution{ get; };
        Windows.Graphics.Imaging.BitmapBounds ForegroundBoundingBox{ get; };
        Windows.Graphics.Imaging.SoftwareBitmap MaskData { get; };
    }

    struct FaceDetectionMetadataEntry
    {
        Rectd ROI;
        Int32 Confidence;
    };

    runtimeclass FaceDetectionMetadata : [default] IMetadataPayload
    {
        Windows.Foundation.Collections.IVectorView<FaceDetectionMetadataEntry> Entries { get; };
    }

    // Helper methods to set/get extended properties and extract frame metadata
    runtimeclass PropertyInquiry
    {
        static IVidCapVideoProcAmpPropetyPayload GetVidCapVideoProcAmp(Windows.Media.Devices.VideoDeviceController controller, VidCapVideoProcAmpKind vidCapVideoProcAmpKind);
        static void SetVidCapVideoProcAmpValue(Windows.Media.Devices.VideoDeviceController controller, VidCapVideoProcAmpKind vidCapVideoProcAmpKind, Double value);

        static IExtendedPropertyPayload GetExtendedControl(Windows.Media.Devices.VideoDeviceController controller, ExtendedControlKind extendedControlKind);
        static void SetExtendedControlFlags(Windows.Media.Devices.VideoDeviceController controller, ExtendedControlKind extendedControlKind, UInt64 flags);

        static IMetadataPayload ExtractFrameMetadata(Windows.Media.Capture.Frames.MediaFrameReference frame, FrameMetadataKind metadataKind);
    }
}
